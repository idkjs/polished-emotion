diff --git a/node_modules/@ahrefs/bs-emotion/.merlin b/node_modules/@ahrefs/bs-emotion/.merlin
new file mode 100644
index 0000000..d5c367f
--- /dev/null
+++ b/node_modules/@ahrefs/bs-emotion/.merlin
@@ -0,0 +1,11 @@
+####{BSB GENERATED: NO EDIT
+FLG -ppx '/Volumes/SSD/Github/re-polished/node_modules/bs-platform/darwin/bsc.exe -as-ppx '
+S /Volumes/SSD/Github/re-polished/node_modules/bs-platform/lib/ocaml
+B /Volumes/SSD/Github/re-polished/node_modules/bs-platform/lib/ocaml
+FLG -open Belt
+FLG -w +a-4-9-20-40-41-42-50-61-102-44-40-42-61
+S /Volumes/SSD/Github/re-polished/packages/polished-bs-emotion/node_modules/@minima.app/re-css/lib/ocaml
+B /Volumes/SSD/Github/re-polished/packages/polished-bs-emotion/node_modules/@minima.app/re-css/lib/ocaml
+S src
+B lib/bs/src
+####BSB GENERATED: NO EDIT}
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/.bsbuild b/node_modules/@ahrefs/bs-emotion/lib/bs/.bsbuild
new file mode 100644
index 0000000..e56e3e6
--- /dev/null
+++ b/node_modules/@ahrefs/bs-emotion/lib/bs/.bsbuild
@@ -0,0 +1,6 @@
+2
+Cx
+Emotion
+src	
+1
+0
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/.bsdeps b/node_modules/@ahrefs/bs-emotion/lib/bs/.bsdeps
new file mode 100644
index 0000000..ea5f2df
--- /dev/null
+++ b/node_modules/@ahrefs/bs-emotion/lib/bs/.bsdeps
@@ -0,0 +1,5 @@
+8.4.2
+/Volumes/SSD/Github/re-polished/packages/polished-bs-emotion/node_modules/@ahrefs/bs-emotion
+0
+bsconfig.json	0x1.804a17c8p+30
+src	0x1.804a1954p+30
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/.compiler.log b/node_modules/@ahrefs/bs-emotion/lib/bs/.compiler.log
new file mode 100644
index 0000000..e91fd95
--- /dev/null
+++ b/node_modules/@ahrefs/bs-emotion/lib/bs/.compiler.log
@@ -0,0 +1,28 @@
+#Start(1611827034240)
+
+  We've found a bug for you!
+  /Volumes/SSD/Github/re-polished/packages/polished-bs-emotion/node_modules/@ahrefs/bs-emotion/src/Emotion.re:728:1-729:73
+  
+  726 │ /* ===== 👩‍🎤 Emotion bindings ===== */
+  727 │ 
+  728 │ [@bs.module "@emotion/css"]
+  729 │ external make: (Js.nullable(string), Js.Dict.t(string)) => string = "
+        css";
+  730 │ let css = (~extend: option(string)=?, declarations) =>
+  731 │   declarations->Declarations.toDict->make(extend->Js.Nullable.fromOpt
+        ion, _);
+  
+  The implementation /Volumes/SSD/Github/re-polished/packages/polished-bs-emotion/node_modules/@ahrefs/bs-emotion/src/Emotion.re
+       does not match the interface src/Emotion.cmi:
+       Values do not match:
+         [@bs...] external make:
+           (Js.nullable(string), Js.Dict.t(string)) => string = "css"
+       is not included in
+         [@bs...] external make:
+           (Js.nullable(string), Js.Dict.t(string)) => string = "css"
+       File "/Volumes/SSD/Github/re-polished/packages/polished-bs-emotion/node_modules/@ahrefs/bs-emotion/src/Emotion.rei", line 2501, characters 0-96:
+         Expected declaration
+       File "/Volumes/SSD/Github/re-polished/packages/polished-bs-emotion/node_modules/@ahrefs/bs-emotion/src/Emotion.re", line 728, characters 0-101:
+         Actual declaration
+  
+#Done(1611827034411)
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/.ninja_log b/node_modules/@ahrefs/bs-emotion/lib/bs/.ninja_log
new file mode 100644
index 0000000..db02833
--- /dev/null
+++ b/node_modules/@ahrefs/bs-emotion/lib/bs/.ninja_log
@@ -0,0 +1,19 @@
+# ninja log v6
+0	54	1611827008000000000	src/Cx.ast	699f19e54e8742fc
+54	72	1611827008000000000	src/Cx.d	bd72209ae584133b
+3	94	1611827008000000000	src/Emotion.ast	a094f3ee05bfebca
+72	96	1611827008000000000	src/Cx.cmj	473c30fbf83e176d
+72	96	1611827008000000000	src/Cx.cmi	473c30fbf83e176d
+72	96	1611827008000000000	../../src/Cx.bs.js	473c30fbf83e176d
+4	120	1611827008000000000	src/Emotion.iast	435cda29f3d02b34
+120	133	1611827008000000000	src/Emotion.d	a80a2f2866c46c62
+133	227	1611827008000000000	src/Emotion.cmi	5bc3b8956b254c1
+228	348	1611827008000000000	src/Emotion.cmj	4b577c1001c063b
+228	348	1611827008000000000	../../src/Emotion.bs.js	4b577c1001c063b
+1	54	1611827013000000000	src/Cx.ast	699f19e54e8742fc
+54	69	1611827013000000000	src/Cx.d	bd72209ae584133b
+69	97	1611827013000000000	src/Cx.cmj	473c30fbf83e176d
+69	97	1611827013000000000	src/Cx.cmi	473c30fbf83e176d
+69	97	1611827013000000000	../../src/Cx.bs.js	473c30fbf83e176d
+0	83	1611827032000000000	src/Emotion.ast	a094f3ee05bfebca
+83	98	1611827032000000000	src/Emotion.d	a80a2f2866c46c62
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/.sourcedirs.json b/node_modules/@ahrefs/bs-emotion/lib/bs/.sourcedirs.json
new file mode 100644
index 0000000..8a0bdaf
--- /dev/null
+++ b/node_modules/@ahrefs/bs-emotion/lib/bs/.sourcedirs.json
@@ -0,0 +1 @@
+{ "dirs" : [ "src" ] , "pkgs" : [ [ "bs-platform" , "/Volumes/SSD/Github/re-polished/node_modules/bs-platform" ] , [ "@minima.app/re-css" , "/Volumes/SSD/Github/re-polished/packages/polished-bs-emotion/node_modules/@minima.app/re-css" ] ] , "generated" : [] }
\ No newline at end of file
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/build.ninja b/node_modules/@ahrefs/bs-emotion/lib/bs/build.ninja
new file mode 100644
index 0000000..7250b47
--- /dev/null
+++ b/node_modules/@ahrefs/bs-emotion/lib/bs/build.ninja
@@ -0,0 +1,27 @@
+rescript = 1
+g_finger := /Volumes/SSD/Github/re-polished/packages/polished-bs-emotion/node_modules/@minima.app/re-css/lib/ocaml/install.stamp
+rule astj
+  command = /Volumes/SSD/Github/re-polished/node_modules/bs-platform/darwin/bsc.exe -w -44 -bs-v 8.4.2 -open Belt -absname -bs-ast -o $out $i
+o src/Cx.ast : astj ../../src/Cx.re
+rule deps
+  command = /Volumes/SSD/Github/re-polished/node_modules/bs-platform/darwin/bsb_helper.exe -hash 258eabb4a8b21c4054f6a1d34de41423 $in
+  restat = 1
+o src/Cx.d : deps src/Cx.ast
+rule mij
+  command = /Volumes/SSD/Github/re-polished/node_modules/bs-platform/darwin/bsc.exe -I src -I /Volumes/SSD/Github/re-polished/packages/polished-bs-emotion/node_modules/@minima.app/re-css/lib/ocaml -open Belt -w -44 -bs-package-name @ahrefs/bs-emotion -bs-package-output commonjs:$in_d:.bs.js -bs-v $g_finger $i
+  dyndep = 1
+  restat = 1
+o src/Cx.cmj src/Cx.cmi ../../src/Cx.bs.js : mij src/Cx.ast
+o src/Emotion.ast : astj ../../src/Emotion.re
+o src/Emotion.d : deps src/Emotion.ast src/Emotion.iast
+o src/Emotion.iast : astj ../../src/Emotion.rei
+rule mi
+  command = /Volumes/SSD/Github/re-polished/node_modules/bs-platform/darwin/bsc.exe -I src -I /Volumes/SSD/Github/re-polished/packages/polished-bs-emotion/node_modules/@minima.app/re-css/lib/ocaml -open Belt -w -44 -bs-v $g_finger $i
+  dyndep = 1
+  restat = 1
+o src/Emotion.cmi : mi src/Emotion.iast
+rule mj
+  command = /Volumes/SSD/Github/re-polished/node_modules/bs-platform/darwin/bsc.exe -bs-read-cmi -I src -I /Volumes/SSD/Github/re-polished/packages/polished-bs-emotion/node_modules/@minima.app/re-css/lib/ocaml -open Belt -w -44 -bs-package-name @ahrefs/bs-emotion -bs-package-output commonjs:$in_d:.bs.js -bs-v $g_finger $i
+  dyndep = 1
+  restat = 1
+o src/Emotion.cmj ../../src/Emotion.bs.js : mj src/Emotion.ast src/Emotion.cmi
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/install.ninja b/node_modules/@ahrefs/bs-emotion/lib/bs/install.ninja
new file mode 100644
index 0000000..17b745e
--- /dev/null
+++ b/node_modules/@ahrefs/bs-emotion/lib/bs/install.ninja
@@ -0,0 +1,16 @@
+rescript = 1
+rule cp
+  command = cp $i $out
+rule touch
+ command = touch $out
+o Cx.cmi : cp ../bs/src/Cx.cmi
+o Cx.cmj : cp ../bs/src/Cx.cmj
+o Cx.cmt : cp ../bs/src/Cx.cmt
+o Cx.re : cp ../../src/Cx.re
+o Emotion.cmi : cp ../bs/src/Emotion.cmi
+o Emotion.cmj : cp ../bs/src/Emotion.cmj
+o Emotion.cmt : cp ../bs/src/Emotion.cmt
+o Emotion.re : cp ../../src/Emotion.re
+o Emotion.rei : cp ../../src/Emotion.rei
+o Emotion.cmti : cp ../bs/src/Emotion.cmti
+build install.stamp : touch Cx.cmi Cx.cmj Emotion.cmi Emotion.cmj 
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/src/Cx.ast b/node_modules/@ahrefs/bs-emotion/lib/bs/src/Cx.ast
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/src/Cx.cmi b/node_modules/@ahrefs/bs-emotion/lib/bs/src/Cx.cmi
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/src/Cx.cmj b/node_modules/@ahrefs/bs-emotion/lib/bs/src/Cx.cmj
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/src/Cx.cmt b/node_modules/@ahrefs/bs-emotion/lib/bs/src/Cx.cmt
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/src/Cx.d b/node_modules/@ahrefs/bs-emotion/lib/bs/src/Cx.d
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.ast b/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.ast
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.cmi b/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.cmi
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.cmj b/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.cmj
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.cmt b/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.cmt
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.cmti b/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.cmti
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.d b/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.d
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.iast b/node_modules/@ahrefs/bs-emotion/lib/bs/src/Emotion.iast
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@ahrefs/bs-emotion/src/Cx.bs.js b/node_modules/@ahrefs/bs-emotion/src/Cx.bs.js
index 40fed0f..d856702 100644
--- a/node_modules/@ahrefs/bs-emotion/src/Cx.bs.js
+++ b/node_modules/@ahrefs/bs-emotion/src/Cx.bs.js
@@ -1,2 +1,2 @@
-// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
+// Generated by ReScript, PLEASE EDIT WITH CARE
 /* This output is empty. Its source's type definitions, externals and/or unused code got optimized away. */
diff --git a/node_modules/@ahrefs/bs-emotion/src/Cx.re b/node_modules/@ahrefs/bs-emotion/src/Cx.re
index b9b911f..a336f93 100644
--- a/node_modules/@ahrefs/bs-emotion/src/Cx.re
+++ b/node_modules/@ahrefs/bs-emotion/src/Cx.re
@@ -1,2 +1,2 @@
-[@bs.module "emotion"] [@bs.splice]
+[@bs.module "@emotion/css"] [@bs.splice]
 external merge: array(string) => string = "cx";
diff --git a/node_modules/@ahrefs/bs-emotion/src/Emotion.bs.js b/node_modules/@ahrefs/bs-emotion/src/Emotion.bs.js
index d077c2c..15c2184 100644
--- a/node_modules/@ahrefs/bs-emotion/src/Emotion.bs.js
+++ b/node_modules/@ahrefs/bs-emotion/src/Emotion.bs.js
@@ -1,4 +1,4 @@
-// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
+// Generated by ReScript, PLEASE EDIT WITH CARE
 'use strict';
 
 var Css = require("@minima.app/re-css/src/Css.bs.js");
@@ -10,7 +10,7 @@ var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");
 
 var Css$1 = Css;
 
-var Declaration = { };
+var Declaration = {};
 
 function toDict(declarations) {
   return Js_dict.fromList(Belt_List.flatten(declarations));
@@ -20,31 +20,33 @@ var Declarations = {
   toDict: toDict
 };
 
-var Selector = { };
+var Selector = {};
 
 function p(prop, value) {
-  return /* :: */[
-          /* tuple */[
+  return {
+          hd: [
             prop,
             value
           ],
-          /* [] */0
-        ];
+          tl: /* [] */0
+        };
 }
 
 function important(v) {
-  if (v && !v[1]) {
-    var match = v[0];
-    return /* :: */[
-            /* tuple */[
-              match[0],
-              match[1] + " !important"
-            ],
-            /* [] */0
-          ];
-  } else {
+  if (!v) {
+    return v;
+  }
+  if (v.tl) {
     return v;
   }
+  var match = v.hd;
+  return {
+          hd: [
+            match[0],
+            match[1] + " !important"
+          ],
+          tl: /* [] */0
+        };
 }
 
 function label(x) {
@@ -341,12 +343,12 @@ function backgroundSizes(x) {
   return p("backgroundSize", Css.Helpers.joinWith(Belt_List.map(x, Css.BackgroundSize.toString), ", "));
 }
 
-function boxShadow($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, color) {
-  var x = $staropt$star !== undefined ? $staropt$star : /* zero */-789508312;
-  var y = $staropt$star$1 !== undefined ? $staropt$star$1 : /* zero */-789508312;
-  var blur = $staropt$star$2 !== undefined ? $staropt$star$2 : /* zero */-789508312;
-  var spread = $staropt$star$3 !== undefined ? $staropt$star$3 : /* zero */-789508312;
-  var inset = $staropt$star$4 !== undefined ? $staropt$star$4 : false;
+function boxShadow(xOpt, yOpt, blurOpt, spreadOpt, insetOpt, color) {
+  var x = xOpt !== undefined ? xOpt : "zero";
+  var y = yOpt !== undefined ? yOpt : "zero";
+  var blur = blurOpt !== undefined ? blurOpt : "zero";
+  var spread = spreadOpt !== undefined ? spreadOpt : "zero";
+  var inset = insetOpt !== undefined ? insetOpt : false;
   return p("boxShadow", Css.BoxShadow.toString(x, y, blur, spread, inset, color));
 }
 
@@ -381,7 +383,7 @@ function fontSize(x) {
 }
 
 function fontWeight(x) {
-  return p("fontWeight", "" + (String(x) + ""));
+  return p("fontWeight", "" + x);
 }
 
 function fontStyle(x) {
@@ -446,10 +448,10 @@ function textTransform(x) {
   return p("textTransform", Css.TextTransform.toString(x));
 }
 
-function textShadow($staropt$star, $staropt$star$1, $staropt$star$2, color) {
-  var x = $staropt$star !== undefined ? $staropt$star : /* zero */-789508312;
-  var y = $staropt$star$1 !== undefined ? $staropt$star$1 : /* zero */-789508312;
-  var blur = $staropt$star$2 !== undefined ? $staropt$star$2 : /* zero */-789508312;
+function textShadow(xOpt, yOpt, blurOpt, color) {
+  var x = xOpt !== undefined ? xOpt : "zero";
+  var y = yOpt !== undefined ? yOpt : "zero";
+  var blur = blurOpt !== undefined ? blurOpt : "zero";
   return p("textShadow", Css.TextShadow.toString(x, y, blur, color));
 }
 
@@ -528,7 +530,7 @@ function listStyleImage(x) {
 }
 
 function opacity(x) {
-  return p("opacity", "" + (String(x) + ""));
+  return p("opacity", "" + x);
 }
 
 function cursor(x) {
@@ -622,7 +624,7 @@ function fill(x) {
 }
 
 function fillOpacity(x) {
-  return p("fillOpacity", "" + (String(x) + ""));
+  return p("fillOpacity", "" + x);
 }
 
 function fillRule(x) {
@@ -638,11 +640,11 @@ function strokeWidth(x) {
 }
 
 function strokeOpacity(x) {
-  return p("strokeOpacity", "" + (String(x) + ""));
+  return p("strokeOpacity", "" + x);
 }
 
 function strokeMiterlimit(x) {
-  return p("strokeMiterlimit", "" + (String(x) + ""));
+  return p("strokeMiterlimit", "" + x);
 }
 
 function strokeLinecap(x) {
@@ -658,7 +660,7 @@ function stopColor(x) {
 }
 
 function stopOpacity(x) {
-  return p("stopOpacity", "" + (String(x) + ""));
+  return p("stopOpacity", "" + x);
 }
 
 function animation(name, duration, delay, direction, timingFunction, fillMode, playState, iterationCount) {
@@ -752,11 +754,11 @@ function flex(x) {
 }
 
 function flexGrow(x) {
-  return p("flexGrow", "" + (String(x) + ""));
+  return p("flexGrow", "" + x);
 }
 
 function flexShrink(x) {
-  return p("flexShrink", "" + (String(x) + ""));
+  return p("flexShrink", "" + x);
 }
 
 function flexBasis(x) {
@@ -776,7 +778,7 @@ function flexFlow(direction, wrap) {
 }
 
 function order(x) {
-  return p("order", "" + (String(x) + ""));
+  return p("order", "" + x);
 }
 
 function gridTemplateRows(x) {
@@ -864,21 +866,21 @@ function justifyContent(x) {
 }
 
 function zIndex(x) {
-  return p("zIndex", "" + (String(x) + ""));
+  return p("zIndex", "" + x);
 }
 
 function content(x) {
-  return p("content", "\"" + (String(x) + "\""));
+  return p("content", "\"" + x + "\"");
 }
 
 function select(selector, declarations) {
-  return /* :: */[
-          /* tuple */[
+  return {
+          hd: [
             selector,
             Js_dict.fromList(Belt_List.flatten(declarations))
           ],
-          /* [] */0
-        ];
+          tl: /* [] */0
+        };
 }
 
 function active(param) {
@@ -998,483 +1000,483 @@ function placeholder(param) {
 }
 
 function not__(selector, declarations) {
-  return select(":not(" + (String(selector) + ")"), declarations);
+  return select(":not(" + selector + ")", declarations);
 }
 
 function nthChild(selector, declarations) {
-  return select(":nth-child(" + (String(selector) + ")"), declarations);
+  return select(":nth-child(" + selector + ")", declarations);
 }
 
 function nthLastChild(selector, declarations) {
-  return select(":nth-last-child(" + (String(selector) + ")"), declarations);
+  return select(":nth-last-child(" + selector + ")", declarations);
 }
 
 function nthOfType(selector, declarations) {
-  return select(":nth-of-type(" + (String(selector) + ")"), declarations);
+  return select(":nth-of-type(" + selector + ")", declarations);
 }
 
 function nthLastOfType(selector, declarations) {
-  return select(":nth-last-of-type(" + (String(selector) + ")"), declarations);
+  return select(":nth-last-of-type(" + selector + ")", declarations);
 }
 
 function media(query, declarations) {
-  return select("@media " + (String(query) + ""), declarations);
+  return select("@media " + query, declarations);
 }
 
 function supports(query, declarations) {
-  return select("@supports " + (String(query) + ""), declarations);
+  return select("@supports " + query, declarations);
 }
 
 function em(x) {
-  return /* `em */[
-          22632,
-          x
-        ];
+  return {
+          NAME: "em",
+          VAL: x
+        };
 }
 
 function ex(x) {
-  return /* `ex */[
-          22643,
-          x
-        ];
+  return {
+          NAME: "ex",
+          VAL: x
+        };
 }
 
 function ch(x) {
-  return /* `ch */[
-          22181,
-          x
-        ];
+  return {
+          NAME: "ch",
+          VAL: x
+        };
 }
 
 function rem(x) {
-  return /* `rem */[
-          5691738,
-          x
-        ];
+  return {
+          NAME: "rem",
+          VAL: x
+        };
 }
 
 function vw(x) {
-  return /* `vw */[
-          26433,
-          x
-        ];
+  return {
+          NAME: "vw",
+          VAL: x
+        };
 }
 
 function vh(x) {
-  return /* `vh */[
-          26418,
-          x
-        ];
+  return {
+          NAME: "vh",
+          VAL: x
+        };
 }
 
 function vmin(x) {
-  return /* `vmin */[
-          -833470756,
-          x
-        ];
+  return {
+          NAME: "vmin",
+          VAL: x
+        };
 }
 
 function vmax(x) {
-  return /* `vmax */[
-          -833472530,
-          x
-        ];
+  return {
+          NAME: "vmax",
+          VAL: x
+        };
 }
 
 function cm(x) {
-  return /* `cm */[
-          22186,
-          x
-        ];
+  return {
+          NAME: "cm",
+          VAL: x
+        };
 }
 
 function mm(x) {
-  return /* `mm */[
-          24416,
-          x
-        ];
+  return {
+          NAME: "mm",
+          VAL: x
+        };
 }
 
 function q(x) {
-  return /* `q */[
-          113,
-          x
-        ];
+  return {
+          NAME: "q",
+          VAL: x
+        };
 }
 
 function inch(x) {
-  return /* `inch */[
-          -977586742,
-          x
-        ];
+  return {
+          NAME: "inch",
+          VAL: x
+        };
 }
 
 function pc(x) {
-  return /* `pc */[
-          25075,
-          x
-        ];
+  return {
+          NAME: "pc",
+          VAL: x
+        };
 }
 
 function pt(x) {
-  return /* `pt */[
-          25092,
-          x
-        ];
+  return {
+          NAME: "pt",
+          VAL: x
+        };
 }
 
 function px(x) {
-  return /* `px */[
-          25096,
-          x
-        ];
+  return {
+          NAME: "px",
+          VAL: x
+        };
 }
 
 function pct(x) {
-  return /* `pct */[
-          5591841,
-          x
-        ];
+  return {
+          NAME: "pct",
+          VAL: x
+        };
 }
 
 function fr(x) {
-  return /* `fr */[
-          22860,
-          x
-        ];
+  return {
+          NAME: "fr",
+          VAL: x
+        };
 }
 
 function n(x) {
-  return /* `n */[
-          110,
-          x
-        ];
+  return {
+          NAME: "n",
+          VAL: x
+        };
 }
 
 function i(x) {
-  return /* `i */[
-          105,
-          x
-        ];
+  return {
+          NAME: "i",
+          VAL: x
+        };
 }
 
 function f(x) {
-  return /* `f */[
-          102,
-          x
-        ];
+  return {
+          NAME: "f",
+          VAL: x
+        };
 }
 
 function deg(x) {
-  return /* `deg */[
-          4995526,
-          x
-        ];
+  return {
+          NAME: "deg",
+          VAL: x
+        };
 }
 
 function rad(x) {
-  return /* `rad */[
-          5690837,
-          x
-        ];
+  return {
+          NAME: "rad",
+          VAL: x
+        };
 }
 
 function grad(x) {
-  return /* `grad */[
-          -999567410,
-          x
-        ];
+  return {
+          NAME: "grad",
+          VAL: x
+        };
 }
 
 function turn(x) {
-  return /* `turn */[
-          -855250051,
-          x
-        ];
+  return {
+          NAME: "turn",
+          VAL: x
+        };
 }
 
 function rgb(r, g, b) {
-  return /* `rgb */[
-          5692173,
-          /* tuple */[
+  return {
+          NAME: "rgb",
+          VAL: [
             r,
             g,
             b
           ]
-        ];
+        };
 }
 
 function rgba(r, g, b, a) {
-  return /* `rgba */[
-          -878128972,
-          /* tuple */[
+  return {
+          NAME: "rgba",
+          VAL: [
             r,
             g,
             b,
             a
           ]
-        ];
+        };
 }
 
 function hsl(h, s, l) {
-  return /* `hsl */[
-          5197569,
-          /* tuple */[
+  return {
+          NAME: "hsl",
+          VAL: [
             h,
             s,
             l
           ]
-        ];
+        };
 }
 
 function hsla(h, s, l, a) {
-  return /* `hsla */[
-          -988425664,
-          /* tuple */[
+  return {
+          NAME: "hsla",
+          VAL: [
             h,
             s,
             l,
             a
           ]
-        ];
+        };
 }
 
 function hex(x) {
-  return /* `hex */[
-          5194459,
-          x
-        ];
+  return {
+          NAME: "hex",
+          VAL: x
+        };
 }
 
 function linearGradient(a, s) {
-  return /* `linearGradient */[
-          616379637,
-          /* tuple */[
+  return {
+          NAME: "linearGradient",
+          VAL: [
             a,
             s
           ]
-        ];
+        };
 }
 
 function repeatingLinearGradient(a, s) {
-  return /* `repeatingLinearGradient */[
-          -160280644,
-          /* tuple */[
+  return {
+          NAME: "repeatingLinearGradient",
+          VAL: [
             a,
             s
           ]
-        ];
+        };
 }
 
 function radialGradient(s) {
-  return /* `radialGradient */[
-          119548911,
-          s
-        ];
+  return {
+          NAME: "radialGradient",
+          VAL: s
+        };
 }
 
 function repeatingRadialGradient(s) {
-  return /* `repeatingRadialGradient */[
-          -657111370,
-          s
-        ];
+  return {
+          NAME: "repeatingRadialGradient",
+          VAL: s
+        };
 }
 
 function s(x) {
-  return /* `s */[
-          115,
-          x
-        ];
+  return {
+          NAME: "s",
+          VAL: x
+        };
 }
 
 function ms(x) {
-  return /* `ms */[
-          24422,
-          x
-        ];
+  return {
+          NAME: "ms",
+          VAL: x
+        };
 }
 
 function steps(i, se) {
-  return /* `steps */[
-          68058023,
-          /* tuple */[
+  return {
+          NAME: "steps",
+          VAL: [
             i,
             se
           ]
-        ];
+        };
 }
 
 function cubicBezier(a, b, c, d) {
-  return /* `cubicBezier */[
-          -554785527,
-          /* tuple */[
+  return {
+          NAME: "cubicBezier",
+          VAL: [
             a,
             b,
             c,
             d
           ]
-        ];
+        };
 }
 
 function translate(x, y) {
-  return /* `translate */[
-          -914368690,
-          /* tuple */[
+  return {
+          NAME: "translate",
+          VAL: [
             x,
             y
           ]
-        ];
+        };
 }
 
 function translate3d(x, y, z) {
-  return /* `translate3d */[
-          178189215,
-          /* tuple */[
+  return {
+          NAME: "translate3d",
+          VAL: [
             x,
             y,
             z
           ]
-        ];
+        };
 }
 
 function translateX(x) {
-  return /* `translateX */[
-          106728778,
-          x
-        ];
+  return {
+          NAME: "translateX",
+          VAL: x
+        };
 }
 
 function translateY(y) {
-  return /* `translateY */[
-          106728779,
-          y
-        ];
+  return {
+          NAME: "translateY",
+          VAL: y
+        };
 }
 
 function translateZ(z) {
-  return /* `translateZ */[
-          106728780,
-          z
-        ];
+  return {
+          NAME: "translateZ",
+          VAL: z
+        };
 }
 
 function scale(x) {
-  return /* `scale */[
-          -120664438,
-          x
-        ];
+  return {
+          NAME: "scale",
+          VAL: x
+        };
 }
 
 function scaleXY(x, y) {
-  return /* `scaleXY */[
-          -452505077,
-          /* tuple */[
+  return {
+          NAME: "scaleXY",
+          VAL: [
             x,
             y
           ]
-        ];
+        };
 }
 
 function scaleX(x) {
-  return /* `scaleX */[
-          1009117838,
-          x
-        ];
+  return {
+          NAME: "scaleX",
+          VAL: x
+        };
 }
 
 function scaleY(y) {
-  return /* `scaleY */[
-          1009117839,
-          y
-        ];
+  return {
+          NAME: "scaleY",
+          VAL: y
+        };
 }
 
 function scaleZ(z) {
-  return /* `scaleZ */[
-          1009117840,
-          z
-        ];
+  return {
+          NAME: "scaleZ",
+          VAL: z
+        };
 }
 
 function scale3d(x, y, z) {
-  return /* `scale3d */[
-          -452513317,
-          /* tuple */[
+  return {
+          NAME: "scale3d",
+          VAL: [
             x,
             y,
             z
           ]
-        ];
+        };
 }
 
 function rotate(a) {
-  return /* `rotate */[
-          -887077285,
-          a
-        ];
+  return {
+          NAME: "rotate",
+          VAL: a
+        };
 }
 
 function rotate3d(x, y, z, a) {
-  return /* `rotate3d */[
-          142802924,
-          /* tuple */[
+  return {
+          NAME: "rotate3d",
+          VAL: [
             x,
             y,
             z,
             a
           ]
-        ];
+        };
 }
 
 function rotateX(x) {
-  return /* `rotateX */[
-          -249738851,
-          x
-        ];
+  return {
+          NAME: "rotateX",
+          VAL: x
+        };
 }
 
 function rotateY(z) {
-  return /* `rotateY */[
-          -249738850,
-          z
-        ];
+  return {
+          NAME: "rotateY",
+          VAL: z
+        };
 }
 
 function rotateZ(z) {
-  return /* `rotateZ */[
-          -249738849,
-          z
-        ];
+  return {
+          NAME: "rotateZ",
+          VAL: z
+        };
 }
 
 function skew(x, y) {
-  return /* `skew */[
-          -866839798,
-          /* tuple */[
+  return {
+          NAME: "skew",
+          VAL: [
             x,
             y
           ]
-        ];
+        };
 }
 
 function skewX(x) {
-  return /* `skewX */[
-          -31746546,
-          x
-        ];
+  return {
+          NAME: "skewX",
+          VAL: x
+        };
 }
 
 function skewY(y) {
-  return /* `skewY */[
-          -31746545,
-          y
-        ];
+  return {
+          NAME: "skewY",
+          VAL: y
+        };
 }
 
 function matrix(a, b, c, d, e, f) {
-  return /* `matrix */[
-          1002976833,
-          /* tuple */[
+  return {
+          NAME: "matrix",
+          VAL: [
             a,
             b,
             c,
@@ -1482,13 +1484,13 @@ function matrix(a, b, c, d, e, f) {
             e,
             f
           ]
-        ];
+        };
 }
 
 function matrix3d(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
-  return /* `matrix3d */[
-          -420268718,
-          /* tuple */[
+  return {
+          NAME: "matrix3d",
+          VAL: [
             a,
             b,
             c,
@@ -1506,72 +1508,72 @@ function matrix3d(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
             o,
             p
           ]
-        ];
+        };
 }
 
 function minmax(min, max) {
-  return /* `minmax */[
-          -754859950,
-          /* tuple */[
+  return {
+          NAME: "minmax",
+          VAL: [
             min,
             max
           ]
-        ];
+        };
 }
 
 function fitContent(x) {
-  return /* `fitContent */[
-          -195805336,
-          x
-        ];
+  return {
+          NAME: "fitContent",
+          VAL: x
+        };
 }
 
 function repeat(value, trackList) {
-  return /* `repeat */[
-          108828507,
-          /* tuple */[
+  return {
+          NAME: "repeat",
+          VAL: [
             value,
             trackList
           ]
-        ];
+        };
 }
 
 function list(xs) {
-  return /* `list */[
-          -944563106,
-          xs
-        ];
+  return {
+          NAME: "list",
+          VAL: xs
+        };
 }
 
 function ident(x) {
-  return /* `ident */[
-          930693872,
-          x
-        ];
+  return {
+          NAME: "ident",
+          VAL: x
+        };
 }
 
 function nIdent(n, ident) {
-  return /* `nIdent */[
-          -974625886,
-          /* tuple */[
+  return {
+          NAME: "nIdent",
+          VAL: [
             n,
             ident
           ]
-        ];
+        };
 }
 
 function span(x) {
-  return /* `span */[
-          -866592054,
-          x
-        ];
+  return {
+          NAME: "span",
+          VAL: x
+        };
 }
 
 function areas(xs) {
-  return /* `areas */[
-          629510214,
-          xs
-        ];
+  return {
+          NAME: "areas",
+          VAL: xs
+        };
 }
 
 function css(extend, declarations) {
@@ -1580,16 +1582,16 @@ function css(extend, declarations) {
 }
 
 function $$global(selector, declarations) {
-  var css = { };
+  var css = {};
   css[selector] = Js_dict.fromList(Belt_List.flatten(declarations));
   Emotion.injectGlobal(css);
-  return /* () */0;
+  
 }
 
 function keyframes(frames) {
-  return Emotion.keyframes(Belt_List.reduce(frames, { }, (function (acc, item) {
+  return Emotion.keyframes(Belt_List.reduce(frames, {}, (function (acc, item) {
                     var stop = item[0];
-                    acc["" + (String(stop) + "%")] = Js_dict.fromList(Belt_List.flatten(item[1]));
+                    acc["" + stop + "%"] = Js_dict.fromList(Belt_List.flatten(item[1]));
                     return acc;
                   })));
 }
@@ -1606,159 +1608,159 @@ function page(selectors, declarations) {
   }
 }
 
-var Calc = /* alias */0;
+var Calc;
 
 var unsafe = p;
 
-var auto = /* auto */-1065951377;
+var auto = "auto";
 
-var zero = /* zero */-789508312;
+var zero = "zero";
 
-var none = /* none */-922086728;
+var none = "none";
 
-var transparent = /* transparent */582626130;
+var transparent = "transparent";
 
-var currentColor = /* currentColor */292050538;
+var currentColor = "currentColor";
 
-var inline = /* inline */423610969;
+var inline = "inline";
 
-var listItem = /* listItem */632591505;
+var listItem = "listItem";
 
-var block = /* block */888960333;
+var block = "block";
 
-var inlineBlock = /* inlineBlock */-147785676;
+var inlineBlock = "inlineBlock";
 
-var flexBox = /* flex */-1010954439;
+var flexBox = "flex";
 
-var inlineFlex = /* inlineFlex */53323314;
+var inlineFlex = "inlineFlex";
 
-var grid = /* grid */-999565626;
+var grid = "grid";
 
-var inlineGrid = /* inlineGrid */64712127;
+var inlineGrid = "inlineGrid";
 
-var table = /* table */182695950;
+var table = "table";
 
-var inlineTable = /* inlineTable */-854050059;
+var inlineTable = "inlineTable";
 
-var tableRowGroup = /* tableRowGroup */-836725517;
+var tableRowGroup = "tableRowGroup";
 
-var tableHeaderGroup = /* tableHeaderGroup */606419204;
+var tableHeaderGroup = "tableHeaderGroup";
 
-var tableFooterGroup = /* tableFooterGroup */-1045696202;
+var tableFooterGroup = "tableFooterGroup";
 
-var tableRow = /* tableRow */-843129172;
+var tableRow = "tableRow";
 
-var tableColumnGroup = /* tableColumnGroup */850209563;
+var tableColumnGroup = "tableColumnGroup";
 
-var tableColumn = /* tableColumn */97122692;
+var tableColumn = "tableColumn";
 
-var tableCell = /* tableCell */793912528;
+var tableCell = "tableCell";
 
-var tableCaption = /* tableCaption */1054826616;
+var tableCaption = "tableCaption";
 
-var absolute = /* absolute */-1013592457;
+var absolute = "absolute";
 
-var $$static = /* static */100392110;
+var $$static = "static";
 
-var fixed = /* fixed */10615156;
+var fixed = "fixed";
 
-var relative = /* relative */903134412;
+var relative = "relative";
 
-var sticky = /* sticky */188263721;
+var sticky = "sticky";
 
-var hidden = /* hidden */-862584982;
+var hidden = "hidden";
 
-var dotted = /* dotted */841979626;
+var dotted = "dotted";
 
-var dashed = /* dashed */568403505;
+var dashed = "dashed";
 
-var solid = /* solid */12956715;
+var solid = "solid";
 
-var $$double = /* double */852175633;
+var $$double = "double";
 
-var groove = /* groove */472095738;
+var groove = "groove";
 
-var ridge = /* ridge */-379468757;
+var ridge = "ridge";
 
-var inset = /* inset */1042283741;
+var inset = "inset";
 
-var outset = /* outset */209930196;
+var outset = "outset";
 
-var thin = /* thin */-855898535;
+var thin = "thin";
 
-var medium = /* medium */-20425611;
+var medium = "medium";
 
-var thick = /* thick */260669021;
+var thick = "thick";
 
-var linear = /* linear */-325037595;
+var linear = "linear";
 
-var ease = /* ease */-1022587922;
+var ease = "ease";
 
-var easeIn = /* easeIn */138027891;
+var easeIn = "easeIn";
 
-var easeOut = /* easeOut */715748672;
+var easeOut = "easeOut";
 
-var easeInOut = /* easeInOut */-960651557;
+var easeInOut = "easeInOut";
 
-var stepStart = /* stepStart */-193525386;
+var stepStart = "stepStart";
 
-var stepEnd = /* stepEnd */20933615;
+var stepEnd = "stepEnd";
 
-var row = /* row */5693978;
+var row = "row";
 
-var column = /* column */-963948842;
+var column = "column";
 
-var rowReverse = /* rowReverse */378951208;
+var rowReverse = "rowReverse";
 
-var columnReverse = /* columnReverse */135477484;
+var columnReverse = "columnReverse";
 
-var nowrap = /* nowrap */867913355;
+var nowrap = "nowrap";
 
-var wrap = /* wrap */-822134326;
+var wrap = "wrap";
 
-var wrapReverse = /* wrapReverse */-463121288;
+var wrapReverse = "wrapReverse";
 
-var normal = /* normal */812216871;
+var normal = "normal";
 
-var flexStart = /* flexStart */662439529;
+var flexStart = "flexStart";
 
-var flexEnd = /* flexEnd */924268066;
+var flexEnd = "flexEnd";
 
-var center = /* center */98248149;
+var center = "center";
 
-var baseline = /* baseline */287825029;
+var baseline = "baseline";
 
-var stretch = /* stretch */-162316795;
+var stretch = "stretch";
 
-var selfStart = /* selfStart */1040645430;
+var selfStart = "selfStart";
 
-var selfEnd = /* selfEnd */51834799;
+var selfEnd = "selfEnd";
 
-var spaceAround = /* spaceAround */-485895757;
+var spaceAround = "spaceAround";
 
-var spaceBetween = /* spaceBetween */516682146;
+var spaceBetween = "spaceBetween";
 
-var minContent = /* minContent */-550577721;
+var minContent = "minContent";
 
-var maxContent = /* maxContent */60557045;
+var maxContent = "maxContent";
 
-var autoFill = /* autoFill */652328338;
+var autoFill = "autoFill";
 
-var autoFit = /* autoFit */494053794;
+var autoFit = "autoFit";
 
-var gridStart = /* gridStart */-120668228;
+var gridStart = "gridStart";
 
-var gridEnd = /* gridEnd */120775861;
+var gridEnd = "gridEnd";
 
-var firstBaseline = /* firstBaseline */116572373;
+var firstBaseline = "firstBaseline";
 
-var lastBaseline = /* lastBaseline */-222697221;
+var lastBaseline = "lastBaseline";
 
-var spaceEvenly = /* spaceEvenly */-1016061555;
+var spaceEvenly = "spaceEvenly";
 
-var rowDense = /* rowDense */-15525083;
+var rowDense = "rowDense";
 
-var columnDense = /* columnDense */-227605271;
+var columnDense = "columnDense";
 
 exports.Css = Css$1;
 exports.Calc = Calc;
diff --git a/node_modules/@ahrefs/bs-emotion/src/Emotion.re b/node_modules/@ahrefs/bs-emotion/src/Emotion.re
index 5b93e56..a0b85b6 100644
--- a/node_modules/@ahrefs/bs-emotion/src/Emotion.re
+++ b/node_modules/@ahrefs/bs-emotion/src/Emotion.re
@@ -725,12 +725,12 @@ let columnDense = `columnDense;
 
 /* ===== 👩‍🎤 Emotion bindings ===== */
 
-[@bs.module "emotion"]
+[@bs.module "@emotion/css"]
 external make: (Js.nullable(string), Js.Dict.t(string)) => string = "css";
 let css = (~extend: option(string)=?, declarations) =>
   declarations->Declarations.toDict->make(extend->Js.Nullable.fromOption, _);
 
-[@bs.module "emotion"]
+[@bs.module "@emotion/css"]
 external injectGlobal: Js.Dict.t(Js.Dict.t(string)) => unit = "injectGlobal";
 let global = (selector, declarations) => {
   let css = Js.Dict.empty();
@@ -738,7 +738,7 @@ let global = (selector, declarations) => {
   css->injectGlobal;
 };
 
-[@bs.module "emotion"]
+[@bs.module "@emotion/css"]
 external makeKeyframes: Js.Dict.t(Js.Dict.t(string)) => string = "keyframes";
 let keyframes = (frames: list((int, list(declaration)))) =>
   frames
diff --git a/node_modules/@ahrefs/bs-emotion/src/Emotion.rei b/node_modules/@ahrefs/bs-emotion/src/Emotion.rei
index b050ec7..61cd29b 100644
--- a/node_modules/@ahrefs/bs-emotion/src/Emotion.rei
+++ b/node_modules/@ahrefs/bs-emotion/src/Emotion.rei
@@ -2498,13 +2498,13 @@ let spaceEvenly: [> | `spaceEvenly];
 let areas: list(string) => [> | `areas(list(string))];
 let rowDense: [> | `rowDense];
 let columnDense: [> | `columnDense];
-[@bs.module "emotion"]
+[@bs.module "@emotion/css"]
 external make: (Js.nullable(string), Js.Dict.t(string)) => string = "css";
 let css: (~extend: string=?, list(declaration)) => string;
-[@bs.module "emotion"]
+[@bs.module "@emotion/css"]
 external injectGlobal: Js.Dict.t(Js.Dict.t(string)) => unit = "injectGlobal";
 let global: (Js.Dict.key, list(declaration)) => unit;
-[@bs.module "emotion"]
+[@bs.module "@emotion/css"]
 external makeKeyframes: Js.Dict.t(Js.Dict.t(string)) => string = "keyframes";
 let keyframes: list((int, list(declaration))) => string;
 let fontFace: list(declaration) => unit;
